{% extends 'base.html.twig' %} 
{% block stylesheets %}
    {% stylesheets 
        'assets/css/bootstrap.min.css'
        'assets/css/jquery-ui.min.css'
        'bundles/footable/css/footable.core.css'
        'bundles/footable/demos/css/footable-demos.css'
        'assets/css/jquery.qtip.css'
        'bundles/spectrum/spectrum.css'
        'assets/css/awesome-bootstrap-checkbox.css'
        'assets/css/main.css'
        'assets/css/search.css'
        'assets/css/search_results.css'
    %}
        <link rel="stylesheet" type="text/css" href="{{ asset_url }}">
    {% endstylesheets %} 
    <link rel='shortcut icon' href='{{ asset('assets/images/tor_ibin_icon.ico') }}' />
{% endblock %} 
{% block title %}{{ short_title }} | Results{% endblock %}
{% block main_title %}{{ title }}{% endblock %} 
{% block content %}
<header>
	<nav class="navbar navbar-default main_header" style="background-color: {{ main_color_scheme }};">
        <svg id="svg2" class="main_logo left " xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns="http://www.w3.org/2000/svg" height="40.026" width="69.124" version="1.1" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/">
            <metadata id="metadata7">
              <rdf:RDF>
               <cc:Work rdf:about="">
                <dc:format>image/svg+xml</dc:format>
                <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"/>
                <dc:title/>
               </cc:Work>
              </rdf:RDF>
             </metadata>
             <g id="g3770" stroke-miterlimit="4" stroke-dasharray="none">
              <path id="path2987" d="m48.576,17.582c0,9.2489-7.5012,16.746-16.754,16.746-9.2532,0-16.754-7.4977-16.754-16.746,0-9.2489,7.5012-16.746,16.754-16.746,9.2532,0,16.754,7.4977,16.754,16.746z" stroke-opacity="0.56084655000000005" class="parent" stroke="#000000" stroke-width="0.04307067000000000" fill="#e6e6e6"/>
              <path id="path2991-1" d="m31.367,23.78c0,2.992-2.4267,5.4175-5.42,5.4175-2.9934,0-5.42-2.4255-5.42-5.4175s2.4267-5.4175,5.42-5.4175c2.9934,0,5.42,2.4255,5.42,5.4175z" class="child" stroke="{{ logo_color_scheme }}" stroke-width="0.08252774" fill="{{ logo_color_scheme }}"/>
              <path id="path2991-7" d="m42.899,13.341c0,2.992-2.4267,5.4175-5.42,5.4175-2.9934,0-5.42-2.4255-5.42-5.4175s2.4267-5.4175,5.42-5.4175c2.9934,0,5.42,2.4255,5.42,5.4175z" class="child" stroke="{{ logo_color_scheme }}" stroke-width="0.08252774" fill="{{ logo_color_scheme }}"/>
              <path id="path2991-4" d="m67.986,29.163c0,2.992-2.4267,5.4175-5.42,5.4175-2.9934,0-5.42-2.4255-5.42-5.4175s2.4267-5.4175,5.42-5.4175c2.9934,0,5.42,2.4255,5.42,5.4175z" class="child" stroke="{{ logo_color_scheme }}" stroke-width="0.08252774" fill="{{ logo_color_scheme }}"/>
              <path id="path2991-0" d="m10.903,34.545c0,2.992-2.4267,5.4175-5.42,5.4175-2.9934,0-5.42-2.4255-5.42-5.4175s2.4267-5.4175,5.42-5.4175c2.9934,0,5.42,2.4255,5.42,5.4175z" class="child" stroke="{{ logo_color_scheme }}" stroke-width="0.08252774" fill="{{ logo_color_scheme }}"/>
              <path id="path3807" stroke-linejoin="miter" d="m25.95,23.82-20.47,10.76" class="child" stroke="{{ logo_color_scheme }}" stroke-linecap="butt" stroke-width="1.07676673" fill="none"/>
              <path id="path2991-9-45" d="m69.063,5.4793c0,2.992-2.4267,5.4175-5.42,5.4175-2.9934,0-5.42-2.4255-5.42-5.4175s2.4267-5.4175,5.42-5.4175c2.9934,0,5.42,2.4255,5.42,5.4175z" class="child" stroke="{{ logo_color_scheme }}" stroke-width="0.08252774" fill="{{ logo_color_scheme }}"/>
              <path id="path3807-1" stroke-linejoin="miter" d="m63.64,5.5195-25.848,7.5356" class="child" stroke="{{ logo_color_scheme }}" stroke-linecap="butt" stroke-width="1.07676673" fill="none"/>
              <path id="path3807-1-5" stroke-linejoin="miter" d="m62.56,29.2-24.77-16.15" class="child" stroke="{{ logo_color_scheme }}" stroke-linecap="butt" stroke-width="1.07676673" fill="none"/>
             </g>
        </svg>
		<div style="padding: 12px;">
			<h3 style="color: {{ header_color_scheme }}">
				<strong>{{ title }}</strong>
			</h3>
		</div>
	</nav>
	<nav class="navbar navbar-default">
		<div class="container-fluid">
			<div class="navbar-header tor_ibin_header">
				<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
					<span class="icon-bar"></span> 
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
				</button>
			</div>
			<div id="myNavbar" class="collapse navbar-collapse">
    		    {% if login_status == false %}
    		    	<h5 class="nav-header" style="color: {{ main_color_scheme }}">{{ short_title }}</h5>
    				<ul class="nav navbar-nav ">
    					<li><a href="{{ path('home') }}">Home</a></li>
    					<li class="active"><a href="{{ path('search') }}">Search</a></li>
    					<li><a href="{{ path('download') }}">Downloads</a></li>
    					<li><a href="{{ path('about') }}">About</a></li>
    				</ul>
    				<ul class="nav navbar-nav navbar-right">
    					<li><a href="{{ path('fos_user_security_login') }}">Login</a></li>
    				</ul>
    			{% elseif login_status == true %}
    				<h5 class="nav-header" style="color: {{ main_color_scheme }}">{{ short_title }} Admin</h5>
    				<ul class="nav navbar-nav ">
    					<li><a href="{{ path('admin_home') }}">Home</a></li>
    					<li class="active"><a href="{{ path('admin_search') }}">Search</a></li>
    					<li><a href="{{ path('admin_download') }}">Downloads</a></li>
    					<li><a href="{{ path('admin_about') }}">About</a></li>
    					<li><a href="{{ path('announcement_manager') }}">Announcements</a></li>
    					<li><a href="{{ path('data_manager') }}">Data</a></li>
    					<li><a href="{{ path('file_manager', {'upload_directory': 'FASTA'}) }}">Files</a></li>
    					<li><a href="{{ path('admin_settings') }}">Settings</a></li>
    				</ul>
    				<ul class="nav navbar-nav navbar-right">
    					<li><a href="{{ path('user_logout') }}">Logout</a></li>
    				</ul>
    			{% endif %}
			</div>
		</div>
		<div class="shadow"></div>
	</nav>
</header>
<main>
    <div class="se-pre-con"></div>
    <div class="row network_row" style="background-color: #EEEEEE;">
    	<div class="col-sm-2">
    		<div class="summary_panel">
        		<div class="container">
        		
        		
            		<div class="row">
            			<h3 style="color: {{ main_color_scheme }}">Summary</h3>
            		</div>
            		<div class="row">
        				<div class="row">
        					<h4 style="color: {{ main_color_scheme }}">Search Query</h4>
        				</div>
        				<div class="row">{{ search_query }}</div>
            		</div>
            		<div class="row">	
        				<div class="row">
        					<h4 style="color: {{ main_color_scheme }}">Parameters</h4>
        				</div>
    					{% if organism_count > 1 %}
    						<div class="row">Organism: {{ search_setting_organism }}</div>
    					{% endif %}
    					{% if domain_count > 0 %}
    						<div class="row">Domain: {{ search_setting_domain }}</div>
    					{% endif %}
        				<div class="row">Max Number of interactions: {{ search_setting_max_interactions }}</div>
        				<div class="row">Minimum Interaction Score: {{ parameter_min_interaction_score }}</div>
            		</div>
            		<div class="row">
        				<div class="row">
        					<h4 style="color: {{ main_color_scheme }}">Stats</h4>
        				</div>
        				<div class="row">Number of Interactions: {{ interaction_count }}</div>
        				<div class="row">Number of Domains: {{ domain_count }}</div>
        			</div>
        						
    				<div class="row">
    					<h3 style="color: {{ main_color_scheme }}">Downloads</h3>
    				</div>
    			
    				<div class="row">
    					<h4 style="color: {{ main_color_scheme }}">Download Image</h4>
    				</div>
    				<div class="row">
    					<div class="row">
    						<div class="col-sm-4">
    							PNG:
    						</div>
    						<div class="col-sm-2">
    							<a id='png' class="png" href="" download>Download</a>
    						</div>
    					</div>
    					<div class="row">
    						<div class="col-sm-4">
    							JPG:
    						</div>
    						<div class="col-sm-2">
    							<a id='jpg' class="jpg" href="" download>Download</a>
    						</div>
    					</div>
    				</div>
    				<div class="row">
    					<h4 style="color: {{ main_color_scheme }}">Download Network Data</h4>
    				</div>
    				<div class="row">
    					<div class="row">
    						<div class="col-sm-6">
    							PSI-MI Tab 2.7:
    						</div>
    						<div class="col-sm-2">
    							<a href="{{path('psi_mitab', {'search_term': search_query })}}">Download</a>
    						</div>
    					</div>
    					<div class="row">
    						<div class="col-sm-6">
    							CSV:
    						</div>
    						<div class="col-sm-2">
    							<a href="{{path('csv', {'search_term': search_query })}}">Download</a>
    						</div>
    					</div>
    					<div class="row">
    						<div class="col-sm-6">
    							PSI-MI XML:
    						</div>
    						<div class="col-sm-2">
    							<a href="{{path('psi_mixml', {'search_term': search_query })}}">Download</a>
    						</div>
    					</div>
    					<div class="row">
    						<div class="col-sm-6">
    							Protein Sequences in Multi-FASTA Format:
    						</div>
    						<div class="col-sm-2">
    							<a href="{{path('multi_fasta', {'search_term': search_query })}}">Download</a>
    						</div>
    					</div>
    				</div>
            	</div>
        	</div>
        </div>	
    	<div class="col-sm-8">
    		<div id='cy'></div>
    	</div>
    	<div class="col-sm-2">
        	<div class="summary_panel">
        		<div class="container">
            		<div class="row">
            			<h3 style="color: {{ main_color_scheme }}">View Settings</h3>
            		</div>
    				<div class="row">
    					<label for="view_settings_layout"> Layout </label>
    				</div>	
					<div class="row">
						<select id="view_settings_layout">
							<option value="concentric">Concentric</option>
							<option value="breadthfirst">Breadth-first</option>
							<option value="grid">Grid</option>
							<option value="circle">Circle</option>
						</select>
    				</div>
					<div class="row">
						<label for="label_checkbox">Labels</label>
						<input class="styled" type="checkbox" name="view_settings_labels" id="view_settings_labels" checked="checked" />
					</div>
					<div class="row">
						<button id="view_settings_submit" class="btn btn-success" style="margin-right: 10px;"">
							<span>Update</span>
						</button>
					</div>
					<div class="row">
    					<div class="col-sm-5">
    					    <div class="row">
        						<label for="protein_of_intrest_color">Nodes</label>
        					</div>
    					</div>
    					<div class="col-sm-7">
    					</div>					
					</div>
					<div class="row">
    					<div class="col-sm-5">
        					<div class="row">
        						<input type='text' id='protein_of_intrest_color' />
        						<div id="spectrum_js"></div>
        					</div>
    					</div>
    					<div class="col-sm-7">
    					</div>
					</div>
					<div class="row">
    					<div class="col-sm-5">
    					   	<div class="row">
        						<label for="published_color">Published</label>
        					</div>
    					</div>
    					<div class="col-sm-7">
    					    <div class="row">
        						<label for="pre-published_color">Pre-Published</label>
        					</div>
    					</div>					
					</div>
					<div class="row">
    					<div class="col-sm-5">
    					    <div class="row">
        						<input type='text' id='published_color' />
        						<div id="spectrum_js"></div>
        					</div>
    					</div>
    					<div class="col-sm-7">
        					<div class="row">
        						<input type='text' id='pre-published_color' />
        						<div id="spectrum_js"></div>
        					</div>
    					</div>
					</div>
					<div class="row">
            			<h3 style="color: {{ main_color_scheme }}">Data Settings</h3>
            		</div>
            		<form>
					<div class="row">
						<label for="min_interaction_score"> Minimum Required Interaction Score: </label>
					</div>
					<div class="row">
						<div id="min_interaction_score">
							<div id="min_interaction_score_handle" class="ui-slider-handle"></div>
						</div>
					</div>
					<div class="row">
						<label for="max_number_of_interactions"> Max Number of Interactions: </label>
					</div>
					<div class="row">
						<input type="text" name="max_number_of_interactions" id="max_number_of_interactions" style="width: 60px;" value="50" />
					</div>
					<div class="row">
						<a id="update_data_settings" class="btn btn-success" style="margin-right: 10px;" href=""> <span>Update</span></a>
					</div>
					</form>	
				</div>
    		</div>
    	</div>
    </div>
    <div class="row result_row">
    	<div class="shadow"></div>
    	<div class="row">
    		<ul class="nav nav-pills" style="margin: auto; width: 40%;">
    			<li class="active pill"><a data-toggle="pill" href="#network" style="color: {{ main_color_scheme }}">Network</a></li>
     		</ul>
    	</div>
	<div class="row result_row">
		<div class="results_panel">
			<div class="tab-content" style="padding-top: 0;">
				<div id="network"  class="tab-pane fade in active">
					<div class="container" style="overflow: auto;">
						<div class="row">
							<h3 style="color: {{ main_color_scheme }}">Interactions</h3>
						</div>
						<div class="row">
							<div class="col-sm-8">
								<div class="input-group input-group-sm">
									<lable for="change-page-size">Page Size:</lable>
									<select id="change-page-size">
										<option value="2">2</option>
										<option value="3">3</option>
										<option value="5">5</option>
										<option value="10" selected>10</option>
									</select>
								</div>
							</div>
							<div class="col-sm-4">
								<input type="text" id="filter" placeholder="Search" />
							</div>
						</div>
						{% if interaction_array|length > 0 %}
						<table id="search_result_table" class="footable table"
							data-filter="#filter" data-filtering="true"
							data-filter-minimum="3">
							<thead>
								<tr>
									<th>Interactor A Gene Name</th>
									<th>Interactor B Gene Name</th>
									<th>Score</th>
									<th>Binding Start</th>
									<th>Binding End</th>
									<th>Dataset</th>
								</tr>
							</thead>
							<tbody>

								{% for interaction in interaction_array %}
								<tr>
									<td>{{ interaction.interactor_A_gene_name }}</td>
									<td>{{ interaction.interactor_B_gene_name }}</td>
									<td>{{ interaction.score }}</td>
									<td>{{ interaction.binding_start }}</td>
									<td>{{ interaction.binding_end }}</td>
									<td><a href="http://www.ncbi.nlm.nih.gov/pubmed/{{ interaction.dataset }}" target="_blank">Reference</a></td>
								</tr>
								{% endfor %}
							</tbody>
							<tfoot>
								<tr>
									<td colspan="5">
										<div class="pagination pagination-centered"></div>
									</td>
								</tr>
							</tfoot>
						</table>
						{% else %}
						<p>No Interactions Found</p>
						{% endif %} 
					</div>
				</div>
			</div>
		</div>
	</div>

</main>
<footer>
	<div class="row">
		<div class="shadow"></div>
	    {{ footer | raw }}
	</div>
</footer>
{% endblock %} 
{% block javascripts %}
    {{ tinymce_init() }}
    {% javascripts
    	'bundles/fosjsrouting/js/router.js'
        'assets/js/jquery-2.1.4.min.js'
        'assets/js/jquery-ui.min.js'
        'assets/js/bootstrap.min.js'
        'bundles/footable/demos/js/bootstrap-tab.js'
        'bundles/footable/demos/js/demos.js'
        'bundles/footable/js/footable.js'
        'bundles/footable/js/footable.paginate.js'
        'bundles/footable/js/footable.filter.js'
        'assets/js/cytoscape.min.js'
        'assets/js/cytoscape-qtip.js'
        'assets/js/jquery.qtip.js'
        'bundles/spectrum/spectrum.js'   
        'assets/js/main.js'
        'assets/js/search_results.js' %}
        <script src="{{ asset_url }}"></script>
    {% endjavascripts %}
    <script src="{{ path('fos_js_routing_js', { callback: 'fos.Router.setData' }) }}"></script>
    
    
    <script id="document_js">
    $(function(){    
    	var proteinOfIntrestName = '';
		var cy = cytoscape({	
			container: document.getElementById('cy'),
    	  	elements: 
          	{
    	     	nodes: [],      
    	     	edges: []
    	  	},
    	  	style: 
		  	[
    	  		{
    				selector: '$node',
    				css: 
    				{
                        'content': 'data(name)',
                        'text-valign': 'center',
                        'color': 'white',
                        'text-outline-width': 2,
                        'padding-top': '10px',
                        'padding-left': '10px',
                        'padding-bottom': '10px',
                        'padding-right': '10px',
                        'text-align': 'center',
                        'background-color': '#55ACEE'
        			}
    			},
            	{
                    selector: '.protein_of_intrest',
                    css: 
                    {
                        'content': 'data(gene_name)',
                        'text-valign': 'center',
                        'color': 'white',
                        'text-outline-width': 2,
                        'padding-top': '10px',
                        'padding-left': '10px',
                        'padding-bottom': '10px',
                        'padding-right': '10px',
                        'text-align': 'center',
                        'background-color': '#55ACEE'
                    }
				},
                {
                	selector: '.edge',
                	css: 
                    {
                	  'line-color' : '#AAAAAA'
                	}
                }
			]
		});
    
    	var result = {{ json | raw }};
    
    	var domainArray = result.domain;
    	var proteinOfIntrestArray = result.protein_of_intrest;
    	var interactingProteinNodeArray = result.interacting_protein_nodes;
    	var edgeArray = result.edge;
    	

    		
		var proteinId = proteinOfIntrestArray[0];
		var proteinName = proteinOfIntrestArray[1];
		var geneName = proteinOfIntrestArray[2];
		var proteinDescription = proteinOfIntrestArray[3];
		var externalLinksArray = proteinOfIntrestArray[4]; 

		var nodeProteinId = proteinId + "_" + proteinName;

		proteinOfIntrestName = proteinName;

		if( {{ interaction_count }} > 0 ){
    		cy.add([{ 
    			group: "nodes",
    			data: { id: nodeProteinId, protein_name: proteinName, gene_name: geneName, description: proteinDescription, external_links: externalLinksArray },
    			classes: "protein_of_intrest"
    			
    		}]);
    	}

		for (i = 1; i < domainArray.length; ++i) {

			var domainId = domainArray[i][0];
			var domainName = domainArray[i][1];
			var domainType = domainArray[i][2];

			cy.add([{ 
				group: "nodes",
				data: { id: domainName, name: domainType, name_domain: domainId, domain_name: domainName, domain_id: domainId, protein_name: proteinName, parent: nodeProteinId},
				classes: "domain"
				
			}]);

			
		}



    	
    	for (i = 0; i < interactingProteinNodeArray.length; ++i) {
    		
    		var proteinId = interactingProteinNodeArray[i][0];
    		var proteinName = interactingProteinNodeArray[i][1];
    		var geneName = interactingProteinNodeArray[i][2];
    		var proteinDescription = interactingProteinNodeArray[i][3];
    		var nodeProteinId = proteinId + "_" + proteinName;
    		var linkArray = interactingProteinNodeArray[i][4];

    
    		cy.add([{ 
    			group: "nodes",
    			data: { id: nodeProteinId, name: geneName, protein_name: proteinName, gene_name: geneName, description: proteinDescription, external_links: linkArray},
    			classes: "interacting_protein_node"
    		}]);
    	}

    	for (i = 0; i < edgeArray.length; ++i) {
    		
    		var sourceDomainId = edgeArray[i][0];
    		var domainName = edgeArray[i][1];
    		var targetProteinId = edgeArray[i][2];
    		var sourceProteinName = edgeArray[i][3];
    		var targetProteinName = edgeArray[i][4];
    		var scoreData = edgeArray[i][5];
    		var publicationStatus = edgeArray[i][6];
    		
    		
    		var nodeSourceDomainId = domainName;
    		var nodeTargetProteinId = targetProteinId + '_' + targetProteinName;
    		var edgeID = sourceDomainId + ',' + domainName + ',' + targetProteinId + ',' + targetProteinName + ',' + scoreData;
    		//add edge data to cytoscape
        	var widthData = 1;
    		if (scoreData <= 0.20){
    			widthData = 2;
    		}else if(scoreData <= 0.40 && scoreData > 0.20){
    			widthData = 3;
    		}else if(scoreData <= 0.60 && scoreData > 0.40){
    			widthData = 4;
    		}else if(scoreData <= 0.80 && scoreData > 0.60){
    			widthData = 5;
    		}else if(scoreData <= 1 && scoreData > 0.80){
    			widthData = 6;
    		} 

    		var publicationColor = '#AAAAAA';

    		if(publicationStatus == 'published'){
    			publicationColor = '#93C47D';
        	}else if(publicationStatus == 'pre-published'){
        		publicationColor = '#F6B26B';
            }
    
        	cy.add([{ 
        		group: "edges",
        		classes: publicationStatus, 
        		data: { 
        			id: edgeID, 
        			source: nodeSourceDomainId, 
        			target: nodeTargetProteinId, 
        			interaction: sourceProteinName + '-' + targetProteinName,
        			domain: domainName,
        			score: scoreData
        			} 
        	}]).css({ 'width': widthData, 'line-color' : publicationColor});
        	
        	classes: "interacting_protein_node "
    	}

    	cy.center();
    	
    	cy.layout({ 
    		name: 'concentric',
    		avoidOverlap: true,
    		equidistant: true,
    		minNodeSpacing: 50,
    	});
    
    
    	$('#view_settings_submit').on("click", function(){
    
    		layoutType = $('#view_settings_layout').val();
    
    		
    		cy.layout({ 
    			name: layoutType,
    			avoidOverlap: true,
    			equidistant: true,
    			minNodeSpacing: 50,
    			
    		}); 
    
    
    		if($("#view_settings_labels").is(':checked')){
    			cy.style().selector('$node').style({'content': 'data(name)'}).update();
    
    		}else{
    
    			cy.style().selector('$node').style({'content': ''}).update();
    		}
    
    	});


  

    	cy.$('.interacting_protein_node').qtip({
    		content: function(){ 
    			var proteinName = this.data('protein_name');
    			var searchTerm = this.data('search_term');
    			var geneName = this.data('gene_name');
    			var proteinDescription = this.data('description');
    			var linkArray = this.data('external_links');
    			var returnLinks = '<div class="row">';

    			$.each(linkArray, function(database, links) {

    				returnLinks += '<div class="row">' + database + '</div>';
    				returnLinks += '<div class="row">';
    				for (i = 0; i < links.length; ++i) {
    					link_id = links[i][0];
    					link = links[i][1];
						returnLinks += '<a href="' + link + '" target="_blank">' + link_id + '</a> ';
					}
					returnLinks += '</div>';
    			});
    			
    			returnLinks += '</div>';			
    			
    			return '<div class="container"><div class="row"><div class="col-sm-8"><h4>' + geneName + '</h4></div></div><div class="col-sm-7"><div class="row"><h4>Description</h4></div><div class="row"><span class="more">' + proteinDescription + '</span></div></div><div class="col-sm-5"><div class="row"><h4>Links</h4></div>' + returnLinks + '</div><div class="row"><div class="col-sm-8"><div class="row"><h4>Actions</h4></div><div class="row"><a href="' + Routing.generate('search_results', { search_term: proteinName, max_number_of_interactions: '50' }) + '" target="_blank">Search for ' + geneName + '</a></div><div class="row"><a href="' + Routing.generate('protein_sequence', { search_term: proteinName }) + '"  target="_blank">Show protein sequence</a></div></div></div></div><script>$(document).ready(function() {var showChar = 300;var ellipsestext = "...";var moretext = "Read More";var lesstext = "Show less";$(".more").each(function() {var content = $(this).html();if(content.length > showChar) {var c = content.substr(0, showChar);var h = content.substr(showChar, content.length - showChar);var html = c + \'<span class="moreellipses">\' + ellipsestext + \'&nbsp;</span><span class="morecontent"><span>\' + h + \'</span>&nbsp;&nbsp;<a href="" class="morelink">Read More</a></span>\';$(this).html(html);}});$(".morelink").on("click", function(){if($(this).hasClass("less")) {$(this).removeClass("less");$(this).html(moretext);} else {$(this).addClass("less");$(this).html(lesstext);}$(this).parent().prev().toggle();$(this).prev().toggle();return false;});});</' + 'script>';

    				
    		},
    		position: {
    			my: 'top center',
    			at: 'bottom center'
    		},
    		style: {
    			classes: 'qtip-bootstrap',
    			tip: {
    				width: 16,
    				height: 8
    			}
    		},
    	});

    	var domain_colours = ["black", "#ca0020", "#f4a582", "#0571b0", "#ffffbf", "#92c5de"];
    	
    	for (i = 1; i < domainArray.length; ++i) {
    		
			var domainId = domainArray[i][0];
			var domainName = domainArray[i][1];
			var domainType = domainArray[i][2];


    		
    		var domainColour = domain_colours[i];
    		var domainSelector = '#' + domainName;
    		
    		cy.$(domainSelector).neighborhood( 'edge' ).style({'line-color' : domainColour });
    		cy.$(domainSelector).neighborhood( 'node' ).style({'background-color': domainColour });
    		cy.$(domainSelector).roots().style({'background-color': domainColour });
    
    
    	}

		cy.$('.domain').qtip({
		    show: {
	            solo: true,
		    },
			content: function(){ 
				return '<div class="container">' + 
        					'<div class="row">' + 
        						'<h4>' + this.data('domain_name') + '</h4>' +
        					'</div>' +
        					 '<div class="row">' +
        			     		'<h4>Actions</h4>' +
        			    	'</div>'+
        			    	'<div class="row">'+
        			       		'<a href="' + Routing.generate('domain_sequence', { search_term: this.data('domain_name') }) + '"  target="_blank">Show domain sequence</a>' +
        			    	'</div>' +
        				'</div>';	
			},
			position: {
				my: 'top center',
				at: 'bottom center'
			},
			style: {
				classes: 'qtip-bootstrap',
				tip: {
					width: 20,
					height: 8
				}
			},
		});

    	cy.edges().qtip({
    		content: function(){ 
    			return 'Interaction: ' + 
    			this.data('interaction') + 
    			'<br/>' + 
    			'Score: ' +
    			 this.data('score') +
    			 '<br/>' 
    
    
    			 ; 
    		},
    		position: {
    			my: 'top center',
    			at: 'bottom center'
    		},
    		style: {
    			classes: 'qtip-bootstrap',
    			tip: {
    				width: 16,
    				height: 8
    			}
    		}
    	});

    	cy.$('.protein_of_intrest').qtip({
    		content: function(){ 
    			var proteinName = this.data('protein_name');
    			var searchTerm = this.data('search_term');
    			var geneName = this.data('gene_name');
    			var proteinDescription = this.data('description');
    			var linkArray = this.data('external_links');
    			var returnLinks = '<div class="row">';

    			$.each(linkArray, function(database, links) {

    				returnLinks += '<div class="row">' + database + '</div>';
    				returnLinks += '<div class="row">';
    				for (i = 0; i < links.length; ++i) {
    					link_id = links[i][0];
    					link = links[i][1];
						returnLinks += '<a href="' + link + '" target="_blank">' + link_id + '</a> ';
					}
					returnLinks += '</div>';
    			});
    			
    			returnLinks += '</div>';			
    			
    			return '<div class="container"><div class="row"><div class="col-sm-8"><h4>' + geneName + '</h4></div></div><div class="col-sm-7"><div class="row"><h4>Description</h4></div><div class="row"><span class="more">' + proteinDescription + '</span></div></div><div class="col-sm-5"><div class="row"><h4>Links</h4></div>' + returnLinks + '</div><div class="row"><div class="col-sm-8"><div class="row"><h4>Actions</h4></div><div class="row"><a href="' + Routing.generate('search_results', { search_term: proteinName, max_number_of_interactions: '50' }) + '" target="_blank">Search for ' + geneName + '</a></div><div class="row"><a href="' + Routing.generate('protein_sequence', { search_term: proteinName }) + '"  target="_blank">Show protein sequence</a></div></div></div></div>';    				
    		},
    		position: {
    			my: 'top center',
    			at: 'bottom center'
    		},
    		style: {
    			classes: 'qtip-bootstrap',
    			tip: {
    				width: 20,
    				height: 8
    			},
    			
			
    		},
    		
		
    	});
        
    	cy.$('.protein_of_intrest').style({'background-color': '#55ACEE'});
    
    
    	$('#svg').on('click', function(){
    		var png64 = cy.png();
    		$('#svg').attr('href', png64);
    	});
    
    	$('#png').on('click', function(){
    		var png64 = cy.png();
    		$('#png').attr('href', png64);
    	});
    
    	$('#jpg').on('click', function(){
    		var jpg = cy.jpg();
    		$('#jpg').attr('href', jpg);
    	});
    
    
        $('#protein_of_intrest_color').spectrum({
            
            
    	    color: '#55ACEE',
    	    showInput: true,
    	    className: "full-spectrum",
    	    showInitial: true,
    	    showPalette: true,
    	    showSelectionPalette: true,
    	    maxSelectionSize: 10,
    	    preferredFormat: "hex",
    	    change: function(color_change) { 
    	    	var colourChanged = color_change.toHexString();	
    
    			cy.$('.protein_of_intrest').roots().style({'background-color' : colourChanged });
  
    			cy.$('.protein_of_intrest').neighborhood( 'node' ).style({'background-color': colourChanged }); 
       		},
    	    palette: [
    	        ["rgb(0, 0, 0)", "rgb(67, 67, 67)", "rgb(102, 102, 102)",
    	        "rgb(204, 204, 204)", "rgb(217, 217, 217)","rgb(255, 255, 255)"],
    	        ["rgb(152, 0, 0)", "rgb(255, 0, 0)", "rgb(255, 153, 0)", "rgb(255, 255, 0)", "rgb(0, 255, 0)",
    	        "rgb(0, 255, 255)", "rgb(74, 134, 232)", "rgb(0, 0, 255)", "rgb(153, 0, 255)", "rgb(255, 0, 255)"], 
    	        ["rgb(230, 184, 175)", "rgb(244, 204, 204)", "rgb(252, 229, 205)", "rgb(255, 242, 204)", "rgb(217, 234, 211)", 
    	        "rgb(208, 224, 227)", "rgb(201, 218, 248)", "rgb(207, 226, 243)", "rgb(217, 210, 233)", "rgb(234, 209, 220)", 
    	        "rgb(221, 126, 107)", "rgb(234, 153, 153)", "rgb(249, 203, 156)", "rgb(255, 229, 153)", "rgb(182, 215, 168)", 
    	        "rgb(162, 196, 201)", "rgb(164, 194, 244)", "rgb(159, 197, 232)", "rgb(180, 167, 214)", "rgb(213, 166, 189)", 
    	        "rgb(204, 65, 37)", "rgb(224, 102, 102)", "rgb(246, 178, 107)", "rgb(255, 217, 102)", "rgb(147, 196, 125)", 
    	        "rgb(118, 165, 175)", "rgb(109, 158, 235)", "rgb(111, 168, 220)", "rgb(142, 124, 195)", "rgb(194, 123, 160)",
    	        "rgb(166, 28, 0)", "rgb(204, 0, 0)", "rgb(230, 145, 56)", "rgb(241, 194, 50)", "rgb(106, 168, 79)",
    	        "rgb(69, 129, 142)", "rgb(60, 120, 216)", "rgb(61, 133, 198)", "rgb(103, 78, 167)", "rgb(166, 77, 121)",
    	        "rgb(91, 15, 0)", "rgb(102, 0, 0)", "rgb(120, 63, 4)", "rgb(127, 96, 0)", "rgb(39, 78, 19)", 
    	        "rgb(12, 52, 61)", "rgb(28, 69, 135)", "rgb(7, 55, 99)", "rgb(32, 18, 77)", "rgb(76, 17, 48)"]
    	    ]
    	});

        $('#published_color').spectrum({
            
            
    	    color: '#93C47D',
    	    showInput: true,
    	    className: "full-spectrum",
    	    showInitial: true,
    	    showPalette: true,
    	    showSelectionPalette: true,
    	    maxSelectionSize: 10,
    	    preferredFormat: "hex",
    	    change: function(color_change) { 
    	    	var colourChanged = color_change.toHexString();	
    			cy.$('.published').style({'line-color' : colourChanged }); 

       		},
    	    palette: [
    	        ["rgb(0, 0, 0)", "rgb(67, 67, 67)", "rgb(102, 102, 102)",
    	        "rgb(204, 204, 204)", "rgb(217, 217, 217)","rgb(255, 255, 255)"],
    	        ["rgb(152, 0, 0)", "rgb(255, 0, 0)", "rgb(255, 153, 0)", "rgb(255, 255, 0)", "rgb(0, 255, 0)",
    	        "rgb(0, 255, 255)", "rgb(74, 134, 232)", "rgb(0, 0, 255)", "rgb(153, 0, 255)", "rgb(255, 0, 255)"], 
    	        ["rgb(230, 184, 175)", "rgb(244, 204, 204)", "rgb(252, 229, 205)", "rgb(255, 242, 204)", "rgb(217, 234, 211)", 
    	        "rgb(208, 224, 227)", "rgb(201, 218, 248)", "rgb(207, 226, 243)", "rgb(217, 210, 233)", "rgb(234, 209, 220)", 
    	        "rgb(221, 126, 107)", "rgb(234, 153, 153)", "rgb(249, 203, 156)", "rgb(255, 229, 153)", "rgb(182, 215, 168)", 
    	        "rgb(162, 196, 201)", "rgb(164, 194, 244)", "rgb(159, 197, 232)", "rgb(180, 167, 214)", "rgb(213, 166, 189)", 
    	        "rgb(204, 65, 37)", "rgb(224, 102, 102)", "rgb(246, 178, 107)", "rgb(255, 217, 102)", "rgb(147, 196, 125)", 
    	        "rgb(118, 165, 175)", "rgb(109, 158, 235)", "rgb(111, 168, 220)", "rgb(142, 124, 195)", "rgb(194, 123, 160)",
    	        "rgb(166, 28, 0)", "rgb(204, 0, 0)", "rgb(230, 145, 56)", "rgb(241, 194, 50)", "rgb(106, 168, 79)",
    	        "rgb(69, 129, 142)", "rgb(60, 120, 216)", "rgb(61, 133, 198)", "rgb(103, 78, 167)", "rgb(166, 77, 121)",
    	        "rgb(91, 15, 0)", "rgb(102, 0, 0)", "rgb(120, 63, 4)", "rgb(127, 96, 0)", "rgb(39, 78, 19)", 
    	        "rgb(12, 52, 61)", "rgb(28, 69, 135)", "rgb(7, 55, 99)", "rgb(32, 18, 77)", "rgb(76, 17, 48)"]
    	    ]
    	});

        $('#pre-published_color').spectrum({
            
            
    	    color: '#F6B26B',
    	    showInput: true,
    	    className: "full-spectrum",
    	    showInitial: true,
    	    showPalette: true,
    	    showSelectionPalette: true,
    	    maxSelectionSize: 10,
    	    preferredFormat: "hex",
    	    change: function(color_change) { 
    	    	var colourChanged = color_change.toHexString();	
    
    	    	cy.$('.pre-published').style({'line-color' : colourChanged }); 
       		},
    	    palette: [
    	        ["rgb(0, 0, 0)", "rgb(67, 67, 67)", "rgb(102, 102, 102)",
    	        "rgb(204, 204, 204)", "rgb(217, 217, 217)","rgb(255, 255, 255)"],
    	        ["rgb(152, 0, 0)", "rgb(255, 0, 0)", "rgb(255, 153, 0)", "rgb(255, 255, 0)", "rgb(0, 255, 0)",
    	        "rgb(0, 255, 255)", "rgb(74, 134, 232)", "rgb(0, 0, 255)", "rgb(153, 0, 255)", "rgb(255, 0, 255)"], 
    	        ["rgb(230, 184, 175)", "rgb(244, 204, 204)", "rgb(252, 229, 205)", "rgb(255, 242, 204)", "rgb(217, 234, 211)", 
    	        "rgb(208, 224, 227)", "rgb(201, 218, 248)", "rgb(207, 226, 243)", "rgb(217, 210, 233)", "rgb(234, 209, 220)", 
    	        "rgb(221, 126, 107)", "rgb(234, 153, 153)", "rgb(249, 203, 156)", "rgb(255, 229, 153)", "rgb(182, 215, 168)", 
    	        "rgb(162, 196, 201)", "rgb(164, 194, 244)", "rgb(159, 197, 232)", "rgb(180, 167, 214)", "rgb(213, 166, 189)", 
    	        "rgb(204, 65, 37)", "rgb(224, 102, 102)", "rgb(246, 178, 107)", "rgb(255, 217, 102)", "rgb(147, 196, 125)", 
    	        "rgb(118, 165, 175)", "rgb(109, 158, 235)", "rgb(111, 168, 220)", "rgb(142, 124, 195)", "rgb(194, 123, 160)",
    	        "rgb(166, 28, 0)", "rgb(204, 0, 0)", "rgb(230, 145, 56)", "rgb(241, 194, 50)", "rgb(106, 168, 79)",
    	        "rgb(69, 129, 142)", "rgb(60, 120, 216)", "rgb(61, 133, 198)", "rgb(103, 78, 167)", "rgb(166, 77, 121)",
    	        "rgb(91, 15, 0)", "rgb(102, 0, 0)", "rgb(120, 63, 4)", "rgb(127, 96, 0)", "rgb(39, 78, 19)", 
    	        "rgb(12, 52, 61)", "rgb(28, 69, 135)", "rgb(7, 55, 99)", "rgb(32, 18, 77)", "rgb(76, 17, 48)"]
    	    ]
    	});

    	{% for domain in domains %}
            {% if domain %}
                $('#input_{{ domain[1] }}').spectrum({
                    
                    
            	    color: "{{ domain_colours[loop.index] }}",
            	    showInput: true,
            	    className: "full-spectrum",
            	    showInitial: true,
            	    showPalette: true,
            	    showSelectionPalette: true,
            	    maxSelectionSize: 10,
            	    preferredFormat: "hex",
            	    change: function(color_change) { 
            		    var colourChanged = color_change.toHexString();	
            
            			cy.$('#{{ domain[1] }}').roots().style({'background-color' : colourChanged });
            			cy.$('#{{ domain[1] }}').neighborhood( 'edge' ).style({'line-color' : colourChanged }); 
            			cy.$('#{{ domain[1] }}').neighborhood( 'node' ).style({'background-color': colourChanged }); 
               		},
            	    palette: [
            	        ["rgb(0, 0, 0)", "rgb(67, 67, 67)", "rgb(102, 102, 102)",
            	        "rgb(204, 204, 204)", "rgb(217, 217, 217)","rgb(255, 255, 255)"],
            	        ["rgb(152, 0, 0)", "rgb(255, 0, 0)", "rgb(255, 153, 0)", "rgb(255, 255, 0)", "rgb(0, 255, 0)",
            	        "rgb(0, 255, 255)", "rgb(74, 134, 232)", "rgb(0, 0, 255)", "rgb(153, 0, 255)", "rgb(255, 0, 255)"], 
            	        ["rgb(230, 184, 175)", "rgb(244, 204, 204)", "rgb(252, 229, 205)", "rgb(255, 242, 204)", "rgb(217, 234, 211)", 
            	        "rgb(208, 224, 227)", "rgb(201, 218, 248)", "rgb(207, 226, 243)", "rgb(217, 210, 233)", "rgb(234, 209, 220)", 
            	        "rgb(221, 126, 107)", "rgb(234, 153, 153)", "rgb(249, 203, 156)", "rgb(255, 229, 153)", "rgb(182, 215, 168)", 
            	        "rgb(162, 196, 201)", "rgb(164, 194, 244)", "rgb(159, 197, 232)", "rgb(180, 167, 214)", "rgb(213, 166, 189)", 
            	        "rgb(204, 65, 37)", "rgb(224, 102, 102)", "rgb(246, 178, 107)", "rgb(255, 217, 102)", "rgb(147, 196, 125)", 
            	        "rgb(118, 165, 175)", "rgb(109, 158, 235)", "rgb(111, 168, 220)", "rgb(142, 124, 195)", "rgb(194, 123, 160)",
            	        "rgb(166, 28, 0)", "rgb(204, 0, 0)", "rgb(230, 145, 56)", "rgb(241, 194, 50)", "rgb(106, 168, 79)",
            	        "rgb(69, 129, 142)", "rgb(60, 120, 216)", "rgb(61, 133, 198)", "rgb(103, 78, 167)", "rgb(166, 77, 121)",
            	        "rgb(91, 15, 0)", "rgb(102, 0, 0)", "rgb(120, 63, 4)", "rgb(127, 96, 0)", "rgb(39, 78, 19)", 
            	        "rgb(12, 52, 61)", "rgb(28, 69, 135)", "rgb(7, 55, 99)", "rgb(32, 18, 77)", "rgb(76, 17, 48)"]
            	    ]
            	});
            {% endif %}
        {% endfor %}
    	
    
        $('#update_data_settings').on('click', function(){
        	var maxInteractions = $('#max_number_of_interactions').val();
        	var searchScore = $("#min_interaction_score").slider("option", "value");
        	var publices =all

        	var publication_status=all


        	
        	var url = '';
        	if(searchScore != null && maxInteractions >= 1){
        		url = Routing.generate('search_results', { search_term: proteinOfIntrestName, score: searchScore, max_number_of_interactions: maxInteractions });
            }else if (searchScore != null){
            	url = Routing.generate('search_results', { search_term: proteinOfIntrestName, score: searchScore});
            }else if (maxInteractions >= 1){
            	url = Routing.generate('search_results', { search_term: proteinOfIntrestName, max_interactions: maxInteractions });
            }
    
        	$('#update_data_settings').attr('href', url);
        });
        
    });
    

    
    
    $( function() {
        $( "#min_interaction_score" ).slider({
    
    		step: 0.01,
            min: 0,
            max: 1,
            value: {{ min_interaction_score }},
            slide: function( event, ui ) {
              $("#min_interaction_score_handle").html(ui.value);
            }
          });
        $("#min_interaction_score_handle").html($( "#min_interaction_score" ).slider( "value" ));
      });
    
    $(function () {
        $('table').footable();
    	$('#change-page-size').change(function (e) {
    		e.preventDefault();
    		var pageSize = $(this).val();
    		$('.footable').data('page-size', pageSize);
    		$('.footable').trigger('footable_initialized');
    	});
    
    
      });
    </script>
{% endblock %}